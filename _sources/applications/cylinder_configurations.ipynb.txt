{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (3, 3)\n",
    "\n",
    "from matscipy.dislocation import get_elastic_constants, plot_vitek\n",
    "\n",
    "from ase.optimize.precon import PreconLBFGS\n",
    "\n",
    "# interactive visualisation inside the notebook\n",
    "from nglview import show_ase\n",
    "def interactive_view(system, scale=0.5):\n",
    "    view = show_ase(system)\n",
    "    view._remove_representation()\n",
    "    view.add_unitcell()\n",
    "    view.add_spacefill()\n",
    "    view.update_spacefill(radiusType='covalent',\n",
    "                          radiusScale=scale)\n",
    "\n",
    "    view.camera = 'orthographic'\n",
    "    view.parameters = {\"clipDist\": 0}\n",
    "\n",
    "    view.center()\n",
    "    view._remote_call(\"setSize\", target=\"Widget\", args=[\"300px\", \"300px\"])\n",
    "    return view\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building cylindrical configurations with dislocations\n",
    "\n",
    "![](dislocation_cylinder.png)\n",
    "\n",
    "The `matscipy.dislocation` provides a set of tools to create atomistic configurations containing dislocations. In this example we focus on cylindrical configurations. In order to create a dislocation we start with a cylinder of bulk material oriented along the vector of the future dislocation line $\\vec l$. By convention assumed in `matscipy.dislocation` Z direction of the cell always corresponds to the dislocation line $\\vec l$. Then a displacement field is applied to the cylinder and outer radial shell is fixed in order to stabilise the configuration. So we end up with periodic boundary conditions along the dislocation line (Z) and fixed boundaries along X and Y directions. \n",
    "\n",
    "Ase shown on the figure above, screw dislocations are characterised by a displacement with corresponding burgers vector $\\vec b$ parallel to the dislocation line $\\vec l$, while edge dislocations have the burgers vector $\\vec b$ perpendicular to $\\vec l$. Here we use an anisotrpoic solution within [Stroh formalism](https://doi.org/10.1080/14786435808565804) to generate displacement field as implemented in [atomman](https://www.ctcms.nist.gov/potentials/atomman/) package. Please note that for this example we use very small systems (small radius). For production calculations one should do a convergence tests with the system size in order to ensure that fixed boundaries do not affect the studied properties.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Body Centered Cubic \n",
    "\n",
    "Here we will use tungsten as an example BCC material. We need lattice parameter $a_0$ and elastic constants $C_{11}$, $C_{12}$ and $C_{44}$ to create dislocation configuration. For the case of _ab initio_ calculation one can provide corresponding values directly. For much faster calculations based on interatomic potentials `matscipy.dislocation` provides a convenient method `get_elastic_constants` to calculate desired properties. We will use and Embedded Atom Potential from [Marinica _et. al._ 2013 paper](http://dx.doi.org/10.1088/0953-8984/25/39/395502) (version EAM4) for the case of tungsten."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Step     Time          Energy         fmax\n",
      "*Force-consistent energies used in optimization.\n",
      "FIRE:    0 23:55:43       -8.896394*       0.7808\n",
      "FIRE:    1 23:55:43       -8.899920*       0.1160\n",
      "FIRE:    2 23:55:43       -8.897214*       0.7321\n",
      "FIRE:    3 23:55:43       -8.898398*       0.5505\n",
      "FIRE:    4 23:55:43       -8.899676*       0.2427\n",
      "FIRE:    5 23:55:43       -8.899933*       0.1055\n",
      "FIRE:    6 23:55:43       -8.899940*       0.0997\n",
      "FIRE:    7 23:55:43       -8.899952*       0.0883\n",
      "FIRE:    8 23:55:43       -8.899967*       0.0719\n",
      "FIRE:    9 23:55:43       -8.899981*       0.0515\n",
      "FIRE:   10 23:55:43       -8.899991*       0.0281\n",
      "FIRE:   11 23:55:43       -8.899996*       0.0030\n",
      "FIRE:   12 23:55:43       -8.899993*       0.0223\n",
      "FIRE:   13 23:55:43       -8.899993*       0.0220\n",
      "FIRE:   14 23:55:43       -8.899993*       0.0214\n",
      "FIRE:   15 23:55:44       -8.899993*       0.0204\n",
      "FIRE:   16 23:55:44       -8.899994*       0.0192\n",
      "FIRE:   17 23:55:44       -8.899994*       0.0177\n",
      "FIRE:   18 23:55:44       -8.899994*       0.0160\n",
      "FIRE:   19 23:55:44       -8.899995*       0.0140\n",
      "FIRE:   20 23:55:44       -8.899995*       0.0116\n",
      "FIRE:   21 23:55:44       -8.899995*       0.0087\n",
      "FIRE:   22 23:55:44       -8.899996*       0.0053\n",
      "FIRE:   23 23:55:44       -8.899996*       0.0015\n",
      "FIRE:   24 23:55:44       -8.899996*       0.0029\n",
      "FIRE:   25 23:55:44       -8.899996*       0.0028\n",
      "FIRE:   26 23:55:44       -8.899996*       0.0028\n",
      "FIRE:   27 23:55:44       -8.899996*       0.0027\n",
      "FIRE:   28 23:55:44       -8.899996*       0.0026\n",
      "FIRE:   29 23:55:44       -8.899996*       0.0025\n",
      "FIRE:   30 23:55:44       -8.899996*       0.0023\n",
      "FIRE:   31 23:55:44       -8.899996*       0.0022\n",
      "FIRE:   32 23:55:44       -8.899996*       0.0020\n",
      "FIRE:   33 23:55:44       -8.899996*       0.0017\n",
      "FIRE:   34 23:55:44       -8.899996*       0.0014\n",
      "FIRE:   35 23:55:44       -8.899996*       0.0010\n",
      "FIRE:   36 23:55:44       -8.899996*       0.0006\n",
      "FIRE:   37 23:55:44       -8.899996*       0.0001\n",
      "Fitting C_11\n",
      "Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])\n",
      "Stress array([-1.18132438e+01, -5.57640625e+00,  5.16699364e-04,  4.98363138e+00,\n",
      "        9.85155622e+00]) GPa\n",
      "Cij (gradient) / GPa    :     538.8963758636845\n",
      "Error in Cij / GPa      :     16.5825717045366\n",
      "Correlation coefficient :     0.9985827043591162\n",
      "Setting C11 (1) to 3.363527 +/- 0.103500\n",
      "\n",
      "\n",
      "Fitting C_21\n",
      "Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])\n",
      "Stress array([-5.18065223e+00, -2.29474891e+00,  5.16699364e-04,  1.85231305e+00,\n",
      "        3.74210436e+00]) GPa\n",
      "Cij (gradient) / GPa    :     219.92575154543857\n",
      "Error in Cij / GPa      :     12.448181242736544\n",
      "Correlation coefficient :     0.9952287298127411\n",
      "Setting C21 (7) to 1.372669 +/- 0.077695\n",
      "\n",
      "\n",
      "Fitting C_31\n",
      "Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])\n",
      "Stress array([-5.18065223e+00, -2.29474891e+00,  5.16699364e-04,  1.85231305e+00,\n",
      "        3.74210436e+00]) GPa\n",
      "Cij (gradient) / GPa    :     219.92575154543883\n",
      "Error in Cij / GPa      :     12.44818124273641\n",
      "Correlation coefficient :     0.9952287298127412\n",
      "Updating C31 (7) with value 1.372669 +/- 0.077695\n",
      "\n",
      "\n",
      "Fitting C_44\n",
      "Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])\n",
      "Stress array([-4.37402918e+00, -1.88648042e+00, -4.92161680e-16,  1.43561482e+00,\n",
      "        2.90478275e+00]) GPa\n",
      "Cij (gradient) / GPa    :     178.79719102977347\n",
      "Error in Cij / GPa      :     12.700273290907242\n",
      "Correlation coefficient :     0.9925165888430469\n",
      "Setting C44 (4) to 1.115964 +/- 0.079269\n",
      "\n",
      "\n",
      "[[b C11 b C12 b C12 b     b     b    ]\n",
      " [b C12 b C11 b C12 b     b     b    ]\n",
      " [b C12 b C12 b C11 b     b     b    ]\n",
      " [b     b     b     b C44 b     b    ]\n",
      " [b     b     b     b     b C44 b    ]\n",
      " [b     b     b     b     b     b C44]]\n",
      "\n",
      " = \n",
      "\n",
      "[[538.9  219.93 219.93   0.     0.     0.  ]\n",
      " [219.93 538.9  219.93   0.     0.     0.  ]\n",
      " [219.93 219.93 538.9    0.     0.     0.  ]\n",
      " [  0.     0.     0.   178.8    0.     0.  ]\n",
      " [  0.     0.     0.     0.   178.8    0.  ]\n",
      " [  0.     0.     0.     0.     0.   178.8 ]]\n",
      "C_11 = 538.90 +/- 16.58 GPa\n",
      "C_12 = 219.93 +/- 12.45 GPa\n",
      "C_44 = 178.80 +/- 12.70 GPa\n"
     ]
    }
   ],
   "source": [
    "# the calculator to provide forces and energies from the potential\n",
    "from matscipy.calculators.eam import EAM\n",
    "eam_calc = EAM(\"../../tests/w_eam4.fs\")\n",
    "\n",
    "# the function accepts any ASE type of calculator\n",
    "alat, C11, C12, C44 = get_elastic_constants(calculator=eam_calc, symbol=\"W\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.143 (Angstrom), 538.90, 219.93, 178.80 (GPa)\n"
     ]
    }
   ],
   "source": [
    "print(f\"{alat:.3f} (Angstrom), {C11:.2f}, {C12:.2f}, {C44:.2f} (GPa)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The values are in good agreement with corresponding numbers in the paper: 3.143, 523, 202, 161"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1/2<111>{110} screw dislocation\n",
    "\n",
    "The notation 1/2<111>{110} means a dislocation with a burgers vector 1/2<111> and glide plane {110}. For screw dislocation, the dislocation line is parallel to the burgers vector, thus Z direction of the cell will be along <111>. The glide plane {110} fixes the Y direction to be <110> and the X direction is fixed by the geometry to be along <112>. However you do not have to think about it to start since `BCCScrew111Dislocation` object contains all the necessary information. All you need to do is to pass $a_0$ and elastic constants $C_{11}$, $C_{12}$ and $C_{44}$ and the symbol of the desired BCC element to the constructor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cell orientation:\n",
      "[[ 1  1 -2]\n",
      " [-1  1  0]\n",
      " [ 1  1  1]]\n",
      "Burgers vector:\n",
      "[1.57169589 1.57169589 1.57169589]\n"
     ]
    }
   ],
   "source": [
    "from matscipy.dislocation import BCCScrew111Dislocation\n",
    "\n",
    "W_screw = BCCScrew111Dislocation(alat, C11, C12, C44, symbol=\"W\")\n",
    "\n",
    "print(\"Cell orientation:\")\n",
    "print(W_screw.axes)\n",
    "\n",
    "print(\"Burgers vector:\")\n",
    "print(W_screw.burgers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are going to use `BCCScrew111Dislocation.build_cylinder()` method to build the cells. All the necessary parameters are passed automatically and we only need to chose the radius of the cell in (X,Y) plane. The function returns reference bulk cell and a cell containing dislocation. The displacement field is applied iteratively untill a converged value is achieved, the printed output prints the difference between the steps. The radius provided is a parameter is a radius of unconstrained region around the core. The outer shell of fixed atoms is added on top of this. The default value is 10 Angstom which is about two times larger than a cutoff for the used interatomic potential."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "disloc SCF 0 |d1-d2|_inf = 0.0014003702928255812\n",
      "disloc SCF 1 |d1-d2|_inf = 6.701013134463585e-06\n",
      "disloc SCF 2 |d1-d2|_inf = 3.20650794805033e-08\n",
      "\n",
      "Cell vectors:\n",
      "[[61.59764738  0.          0.        ]\n",
      " [ 0.         62.23598202  0.        ]\n",
      " [ 0.          0.          2.72225714]]\n",
      "\n",
      "Burgers vector lenth:\n",
      "2.7222571354952314\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "057baee8a8ef4f0f85467388a358526d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "W_screw_bulk, W_screw_dislo = W_screw.build_cylinder(radius=20)\n",
    "\n",
    "interactive_view(W_screw_dislo)\n",
    "\n",
    "print(\"\\nCell vectors:\")\n",
    "print(W_screw_dislo.cell.array)\n",
    "\n",
    "print(\"\\nBurgers vector lenth:\")\n",
    "print(np.linalg.norm(W_screw.burgers))\n",
    "\n",
    "interactive_view(W_screw_dislo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Here we have a cell with $|\\vec b| = \\frac{\\sqrt{3}}{2}a_0$ length along the dislocation line. With a periodic conditions along Z it corresponds to infinitely long straight dislocation line. Note that the periodic boundary conditions along the dislocation line are not applied in the visualisation. It makes it easier to see the displecement, but you might notice the atoms outside the simulation box. \n",
    "\n",
    "To increase the size of the cell along the line we can rely on the magic of [ASE](https://wiki.fysik.dtu.dk/ase/) and simply multiply the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "208fa7ae550641b9a77071ce4cd9293d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "interactive_view(W_screw_dislo * [1, 1, 10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since fo screw dislocations the displacement is parallel to the dislocation line, it is not easy to see the displacement without 3D tools. Thus so-called differential displacement (Vitek) maps are used to visualise the dislocation core. `matscipy.dislocation` offers a tool called {py:meth}`matscipy.dislocation.plot_vitek` to build these maps. The colors of the atoms represent three non equivalen planes of W atoms along <111> direction and the arrows represent the difference in displacement of atoms along Z direction. The visualisation below shows so-called compact and symmetric core, which is the most stable for BCC materials. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "plot_vitek(W_screw_dislo, W_screw_bulk, alat=alat, xyscale=5, plot_axes=ax)\n",
    "ax.set_aspect(\"equal\")\n",
    "ax.set_xlabel(f\"{W_screw.axes[0]} direction ($\\AA$)\")\n",
    "ax.set_ylabel(f\"{W_screw.axes[1]} direction ($\\AA$)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the ASE minimisation tools to minimise the structure using the chosen interatomic potential:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PreconLBFGS:   0  17:45:43    -1936.097809       2.5284\n",
      "PreconLBFGS:   1  17:45:46    -1936.291225       0.3596\n",
      "PreconLBFGS:   2  17:45:47    -1936.346345       0.2286\n",
      "PreconLBFGS:   3  17:45:48    -1936.361558       0.6206\n",
      "PreconLBFGS:   4  17:45:48    -1936.374387       0.1534\n",
      "PreconLBFGS:   5  17:45:49    -1936.377025       0.0604\n",
      "PreconLBFGS:   6  17:45:50    -1936.378171       0.0846\n",
      "PreconLBFGS:   7  17:45:52    -1936.378413       0.0449\n",
      "PreconLBFGS:   8  17:45:52    -1936.378520       0.0124\n",
      "PreconLBFGS:   9  17:45:53    -1936.378533       0.0059\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W_screw_dislo.calc = eam_calc\n",
    "opt = PreconLBFGS(W_screw_dislo)\n",
    "opt.run(fmax=0.01)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "plot_vitek(W_screw_dislo, W_screw_bulk, alat=alat, xyscale=5, plot_axes=ax)\n",
    "ax.set_aspect(\"equal\")\n",
    "ax.set_xlabel(f\"{W_screw.axes[0]} direction ($\\AA$)\")\n",
    "ax.set_ylabel(f\"{W_screw.axes[1]} direction ($\\AA$)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Differential displacement map of the relaxed structure shows almost the same picture as before with symmetric 'easy' dislocation core. This means that for the selected interatomic potential this structure is indeed the most stable and that the initial guess of the displacement was reasonably good. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1/2<111>{110} edge dislocation\n",
    "\n",
    "As we said before, for edge dislocations burgers vecort $\\vec b$ is perpendicular to the dislocation $\\vec l$. So here, we have the same glide plane of (110) which fixes the cell Y direction to <110>. X direction now will be along burgers vector <111> and Z dislocation line direction <112>."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cell orientation:\n",
      "[[ 1  1  1]\n",
      " [ 1 -1  0]\n",
      " [ 1  1 -2]]\n",
      "Brurgers vector:\n",
      "[1.57169589 1.57169589 1.57169589]\n"
     ]
    }
   ],
   "source": [
    "from matscipy.dislocation import BCCEdge111Dislocation\n",
    "\n",
    "W_edge = BCCEdge111Dislocation(alat, C11, C12, C44, symbol=\"W\")\n",
    "\n",
    "print(\"Cell orientation:\")\n",
    "print(W_edge.axes)\n",
    "\n",
    "print(\"Burgers vector:\")\n",
    "print(W_edge.burgers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "disloc SCF 0 |d1-d2|_inf = 0.17503856559581366\n",
      "disloc SCF 1 |d1-d2|_inf = 0.030669955637878832\n",
      "disloc SCF 2 |d1-d2|_inf = 0.004376523884616179\n",
      "disloc SCF 3 |d1-d2|_inf = 0.0008807296154242916\n",
      "disloc SCF 4 |d1-d2|_inf = 0.0001545318258490136\n",
      "disloc SCF 5 |d1-d2|_inf = 2.611311185346521e-05\n",
      "disloc SCF 6 |d1-d2|_inf = 5.7489147281541975e-06\n",
      "disloc SCF 7 |d1-d2|_inf = 7.771344639473377e-07\n",
      "\n",
      "Cell vectors:\n",
      "[[54.44514271  0.          0.        ]\n",
      " [ 0.         53.34512744  0.        ]\n",
      " [ 0.          0.          7.69970592]]\n",
      "\n",
      " Burgers vector lenth:\n",
      "2.7222571354952314\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "be19a5730c794aae8b7eb68045b83c77",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "W_edge_bulk, W_edge_dislo = W_edge.build_cylinder(radius=15)\n",
    "\n",
    "print(\"\\nCell vectors:\")\n",
    "print(W_edge_dislo.cell.array)\n",
    "\n",
    "print(\"\\nBurgers vector lenth:\")\n",
    "print(np.linalg.norm(W_edge.burgers))\n",
    "\n",
    "interactive_view(W_edge_dislo, scale=0.25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be seen that the case of edge dislocation the requires more iterations to achieve converged displacement field."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PreconLBFGS:   0  17:45:56    -3017.104358       5.8264\n",
      "PreconLBFGS:   1  17:46:00    -3017.709448       4.8423\n",
      "PreconLBFGS:   2  17:46:01    -3018.145844       3.6772\n",
      "PreconLBFGS:   3  17:46:02    -3018.509917       2.2949\n",
      "PreconLBFGS:   4  17:46:03    -3018.881065       1.4546\n",
      "PreconLBFGS:   5  17:46:05    -3019.131877       0.7014\n",
      "PreconLBFGS:   6  17:46:06    -3019.257094       0.4935\n",
      "PreconLBFGS:   7  17:46:07    -3019.309591       0.8500\n",
      "PreconLBFGS:   8  17:46:09    -3019.331649       0.4274\n",
      "PreconLBFGS:   9  17:46:11    -3019.339919       0.2540\n",
      "PreconLBFGS:  10  17:46:13    -3019.343713       0.2224\n",
      "PreconLBFGS:  11  17:46:14    -3019.345547       0.3021\n",
      "PreconLBFGS:  12  17:46:16    -3019.347613       0.1698\n",
      "PreconLBFGS:  13  17:46:17    -3019.348607       0.0915\n",
      "PreconLBFGS:  14  17:46:19    -3019.349042       0.0348\n",
      "PreconLBFGS:  15  17:46:20    -3019.349154       0.0489\n",
      "PreconLBFGS:  16  17:46:21    -3019.349259       0.0276\n",
      "PreconLBFGS:  17  17:46:23    -3019.349286       0.0100\n",
      "PreconLBFGS:  18  17:46:24    -3019.349297       0.0057\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W_edge_dislo.calc = eam_calc\n",
    "opt = PreconLBFGS(W_edge_dislo)\n",
    "opt.run(fmax=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ffa1a678356e486d87749676e6ce4f85",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "interactive_view(W_edge_dislo, scale=0.25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be seen that relaxed core structure differs significantly from the initial guess."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1/2<111>{110} mixed dislocation\n",
    "\n",
    "For mixed dislocation the cell vector are the same as for the screw dislocation. However the displacement vector is applied along <111> direction that is not parallel to the Z direction: [$1\\bar 11$] and [$1\\bar 1 \\bar1$] with an angle of 70.5 degrees between the vectors. This leads to both edge and screw component in the displacement and thus the name _mixed_ dislocation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cell orientation:\n",
      "[[ 1 -1 -2]\n",
      " [ 1  1  0]\n",
      " [ 1 -1  1]]\n",
      "Burgers vector:\n",
      "[ 1.57169589 -1.57169589 -1.57169589]\n"
     ]
    }
   ],
   "source": [
    "from matscipy.dislocation import BCCMixed111Dislocation\n",
    "\n",
    "W_mixed = BCCMixed111Dislocation(alat, C11, C12, C44, symbol=\"W\")\n",
    "\n",
    "print(\"Cell orientation:\")\n",
    "print(W_mixed.axes)\n",
    "\n",
    "print(\"Burgers vector:\")\n",
    "print(W_mixed.burgers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "disloc SCF 0 |d1-d2|_inf = 0.10539253373490873\n",
      "disloc SCF 1 |d1-d2|_inf = 0.018105901181897643\n",
      "disloc SCF 2 |d1-d2|_inf = 0.0028537827503362645\n",
      "disloc SCF 3 |d1-d2|_inf = 0.0004461832291074441\n",
      "disloc SCF 4 |d1-d2|_inf = 6.968773949250773e-05\n",
      "disloc SCF 5 |d1-d2|_inf = 1.0882737324524605e-05\n",
      "disloc SCF 6 |d1-d2|_inf = 1.6994622201171872e-06\n",
      "disloc SCF 7 |d1-d2|_inf = 2.6538950442800413e-07\n",
      "\n",
      "Cell vectors:\n",
      "[[61.59764738  0.          0.        ]\n",
      " [ 0.         62.23598202  0.        ]\n",
      " [ 0.          0.          2.72225714]]\n",
      "\n",
      "Burgers vector lenth:\n",
      "2.7222571354952314\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e6e8cd4dd3f94b06a921d8bac0bc7c68",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "W_mixed_bulk, W_mixed_dislo = W_mixed.build_cylinder(radius=17)\n",
    "\n",
    "print(\"\\nCell vectors:\")\n",
    "print(W_mixed_dislo.cell.array)\n",
    "\n",
    "print(\"\\nBurgers vector lenth:\")\n",
    "print(np.linalg.norm(W_mixed.burgers))\n",
    "\n",
    "interactive_view(W_mixed_dislo, scale=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "plot_vitek(W_mixed_dislo, W_mixed_bulk, alat=alat, xyscale=8, plot_axes=ax)\n",
    "ax.set_aspect(\"equal\")\n",
    "ax.set_xlabel(f\"{W_mixed.axes[0]} direction ($\\AA$)\")\n",
    "ax.set_ylabel(f\"{W_mixed.axes[1]} direction ($\\AA$)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be seen that the screw displacement component is not local as compared to the case of screw dislocation. This is because in this visualisation edge component of the displacement is not taken into account. It is the full displacement as screw plus edge component that makes a periodic vector leading to perfect structure and thus no displacement far from the dislocation core."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PreconLBFGS:   0  18:11:56    -1378.796211       6.1079\n",
      "PreconLBFGS:   1  18:11:58    -1379.177181       5.5696\n",
      "PreconLBFGS:   2  18:11:58    -1379.433631       3.8806\n",
      "PreconLBFGS:   3  18:11:59    -1379.678480       2.8772\n",
      "PreconLBFGS:   4  18:12:00    -1379.877549       1.7194\n",
      "PreconLBFGS:   5  18:12:00    -1380.025465       1.0665\n",
      "PreconLBFGS:   6  18:12:00    -1380.137886       0.4828\n",
      "PreconLBFGS:   7  18:12:01    -1380.207597       0.7496\n",
      "PreconLBFGS:   8  18:12:01    -1380.243102       0.6630\n",
      "PreconLBFGS:   9  18:12:02    -1380.255614       0.5914\n",
      "PreconLBFGS:  10  18:12:03    -1380.262569       0.6070\n",
      "PreconLBFGS:  11  18:12:03    -1380.272479       0.2771\n",
      "PreconLBFGS:  12  18:12:04    -1380.278208       0.2129\n",
      "PreconLBFGS:  13  18:12:05    -1380.283037       0.2463\n",
      "PreconLBFGS:  14  18:12:06    -1380.285827       0.1471\n",
      "PreconLBFGS:  15  18:12:06    -1380.287208       0.1001\n",
      "PreconLBFGS:  16  18:12:07    -1380.287801       0.0572\n",
      "PreconLBFGS:  17  18:12:07    -1380.287999       0.0161\n",
      "PreconLBFGS:  18  18:12:08    -1380.288042       0.0102\n",
      "PreconLBFGS:  19  18:12:09    -1380.288059       0.0061\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W_mixed_dislo.calc = eam_calc\n",
    "opt = PreconLBFGS(W_mixed_dislo)\n",
    "opt.run(fmax=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dd80ae03bbe5421aa359fa4326d6534f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "interactive_view(W_mixed_dislo, scale=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "plot_vitek(W_mixed_dislo, W_mixed_bulk, alat=alat, xyscale=8, plot_axes=ax)\n",
    "ax.set_aspect(\"equal\")\n",
    "ax.set_xlabel(f\"{W_mixed.axes[0]} direction ($\\AA$)\")\n",
    "ax.set_ylabel(f\"{W_mixed.axes[1]} direction ($\\AA$)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Spreading of the dislocation core along the glide plane can be seen in the displacement map after relaxation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <100>{110} edge 'junction' dislocation\n",
    "\n",
    "So called junction dislocations with burdgers vector along <100> can be formed in the reactions between more abundant dislocations with burgers vector <111> such as: \n",
    "\n",
    "$$\n",
    "    \\frac{1}{2}[1\\bar{1}1] + \\frac{1}{2}[11\\bar{1}] = [100]\n",
    "$$\n",
    "\n",
    "They share the same glide plane ad 1/2<111> dislocations and can play important role in impurity segregation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cell orientation:\n",
      "[[ 1  0  0]\n",
      " [ 0  1  1]\n",
      " [ 0 -1  1]]\n",
      "Burgers vector:\n",
      "[3.14339178 0.         0.        ]\n"
     ]
    }
   ],
   "source": [
    "from matscipy.dislocation import BCCEdge100110Dislocation\n",
    "\n",
    "W_edge = BCCEdge100110Dislocation(alat, C11, C12, C44, symbol=\"W\")\n",
    "\n",
    "print(\"Cell orientation:\")\n",
    "print(W_edge.axes)\n",
    "\n",
    "print(\"Burgers vector:\")\n",
    "print(W_edge.burgers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "disloc SCF 0 |d1-d2|_inf = 0.2560104778537572\n",
      "disloc SCF 1 |d1-d2|_inf = 0.060168332357741605\n",
      "disloc SCF 2 |d1-d2|_inf = 0.008688118653886967\n",
      "disloc SCF 3 |d1-d2|_inf = 0.002036828550612449\n",
      "disloc SCF 4 |d1-d2|_inf = 0.00025500431885919217\n",
      "disloc SCF 5 |d1-d2|_inf = 8.301996157844549e-05\n",
      "disloc SCF 6 |d1-d2|_inf = 1.657879984715005e-05\n",
      "disloc SCF 7 |d1-d2|_inf = 1.7271584200617696e-06\n",
      "disloc SCF 8 |d1-d2|_inf = 6.753730281694459e-07\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d7fbb8ab564e4cd5868adc766d70fdd3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "W_edge_bulk, W_edge_dislo = W_edge.build_cylinder(radius=15)\n",
    "interactive_view(W_edge_dislo, scale=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PreconLBFGS:   0  18:20:57    -1730.274578       3.4263\n",
      "PreconLBFGS:   1  18:20:59    -1730.777063       2.4833\n",
      "PreconLBFGS:   2  18:20:59    -1731.178752       2.1508\n",
      "PreconLBFGS:   3  18:21:00    -1731.476037       1.8161\n",
      "PreconLBFGS:   4  18:21:00    -1731.690456       1.3642\n",
      "PreconLBFGS:   5  18:21:01    -1731.853182       0.7967\n",
      "PreconLBFGS:   6  18:21:02    -1731.973529       0.6496\n",
      "PreconLBFGS:   7  18:21:02    -1732.026735       0.5298\n",
      "PreconLBFGS:   8  18:21:03    -1732.042318       0.2324\n",
      "PreconLBFGS:   9  18:21:04    -1732.049330       0.1783\n",
      "PreconLBFGS:  10  18:21:05    -1732.051240       0.1082\n",
      "PreconLBFGS:  11  18:21:06    -1732.052185       0.0623\n",
      "PreconLBFGS:  12  18:21:07    -1732.052429       0.0465\n",
      "PreconLBFGS:  13  18:21:09    -1732.052507       0.0273\n",
      "PreconLBFGS:  14  18:21:10    -1732.052541       0.0196\n",
      "PreconLBFGS:  15  18:21:12    -1732.052557       0.0112\n",
      "PreconLBFGS:  16  18:21:13    -1732.052567       0.0087\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W_edge_dislo.calc = eam_calc\n",
    "opt = PreconLBFGS(W_edge_dislo)\n",
    "opt.run(fmax=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c28fbc37cabf46b7bffb8a6636ed2b1e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "interactive_view(W_edge_dislo, scale=0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <100>{001} edge dislocation\n",
    "\n",
    "This is the same junction dislocation but lying in a different glide plane."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cell orientation:\n",
      "[[ 1  0  0]\n",
      " [ 0  0 -1]\n",
      " [ 0  1  0]]\n",
      "Burgers vector:\n",
      "[3.14339178 0.         0.        ]\n"
     ]
    }
   ],
   "source": [
    "from matscipy.dislocation import BCCEdge100Dislocation\n",
    "\n",
    "W_edge = BCCEdge100Dislocation(alat, C11, C12, C44, symbol=\"W\")\n",
    "\n",
    "print(\"Cell orientation:\")\n",
    "print(W_edge.axes)\n",
    "\n",
    "print(\"Burgers vector:\")\n",
    "print(W_edge.burgers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "disloc SCF 0 |d1-d2|_inf = 0.2972369526680858\n",
      "disloc SCF 1 |d1-d2|_inf = 0.038938521701512574\n",
      "disloc SCF 2 |d1-d2|_inf = 0.011189887637262474\n",
      "disloc SCF 3 |d1-d2|_inf = 0.0014928978841749763\n",
      "disloc SCF 4 |d1-d2|_inf = 0.0004654204442429144\n",
      "disloc SCF 5 |d1-d2|_inf = 8.16202896045462e-05\n",
      "disloc SCF 6 |d1-d2|_inf = 1.3592535523576643e-05\n",
      "disloc SCF 7 |d1-d2|_inf = 4.370933882835715e-06\n",
      "disloc SCF 8 |d1-d2|_inf = 5.007789461095036e-07\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2a990407a4144ae097f576fd3a8fa971",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "W_edge_bulk, W_edge_dislo = W_edge.build_cylinder(radius=15)\n",
    "interactive_view(W_edge_dislo, scale=0.4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PreconLBFGS:   0  18:21:44    -1197.049020       4.0122\n",
      "PreconLBFGS:   1  18:21:46    -1197.620258       2.9055\n",
      "PreconLBFGS:   2  18:21:46    -1198.067899       2.6049\n",
      "PreconLBFGS:   3  18:21:47    -1198.399388       2.4441\n",
      "PreconLBFGS:   4  18:21:47    -1198.586897       1.1265\n",
      "PreconLBFGS:   5  18:21:47    -1198.671152       1.3040\n",
      "PreconLBFGS:   6  18:21:48    -1198.697964       0.7715\n",
      "PreconLBFGS:   7  18:21:49    -1198.716499       0.2101\n",
      "PreconLBFGS:   8  18:21:50    -1198.718510       0.1449\n",
      "PreconLBFGS:   9  18:21:50    -1198.719648       0.1189\n",
      "PreconLBFGS:  10  18:21:51    -1198.720365       0.0850\n",
      "PreconLBFGS:  11  18:21:52    -1198.720723       0.0767\n",
      "PreconLBFGS:  12  18:21:53    -1198.720870       0.0402\n",
      "PreconLBFGS:  13  18:21:54    -1198.720932       0.0269\n",
      "PreconLBFGS:  14  18:21:55    -1198.720978       0.0333\n",
      "PreconLBFGS:  15  18:21:56    -1198.721004       0.0175\n",
      "PreconLBFGS:  16  18:21:57    -1198.721017       0.0121\n",
      "PreconLBFGS:  17  18:21:58    -1198.721022       0.0046\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W_edge_dislo.calc = eam_calc\n",
    "opt = PreconLBFGS(W_edge_dislo)\n",
    "opt.run(fmax=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a0056c8ee94a4568b71887325358d4b4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "interactive_view(W_edge_dislo, scale=0.4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Face Centered Cubic\n",
    "\n",
    "Work in progress."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Diamond \n",
    "\n",
    "Work in progress."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
